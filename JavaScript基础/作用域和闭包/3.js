/**
 * 理解JavaScript的执行上下文栈，可以应用堆栈信息快速定位问题
 * 1.什么时执行上下文
 *  执行上下文就是JavaScript代码被解析和执行时所在环境的抽象概念，JavaScript中运行任何代码都是在执行上下文中运行
 * 2.执行上下文的类型
 *  a.全局执行上下文： 这是默认的、最基础的执行上下文。不在任何函数中的代码都位于全局执行上下文中。它做了两件事：1. 创建一个全局对象，在浏览器中这个全局对象就是 window 对象。2. 将 this 指针指向这个全局对象。一个程序中只能存在一个全局执行上下文。
 *  b.函数执行上下文： 每次调用函数时，都会为该函数创建一个新的执行上下文。每个函数都拥有自己的执行上下文，但是只有在函数被调用的时候才会被创建。
 *  c.Eval 函数执行上下文： 运行在 eval 函数中的代码也获得了自己的执行上下文
 */

 /**
  * 执行上下文的生命周期 创建阶段 → 执行阶段 → 回收阶段
  * 创建阶段：
  *   创建变量对象：首先初始化函数的参数 arguments，提升函数声明和变量声明。下文会详细说明。
  *   创建作用域链（Scope Chain）：在执行期上下文的创建阶段，作用域链是在变量对象之后创建的。作用域链本身包含变量对象。作用域链用于解析变量。当被要求解析变量时，JavaScript 始终从代码嵌套的最内层开始，如果最内层没有找到变量，就会跳转到上一层父作用域中查找，直到找到该变量。
  *   确定 this 指向： this 的值是在执行的时候才能确认，定义的时候不能确认
  * 在一段 JS 脚本执行之前，要先解析代码（所以说 JS 是解释执行的脚本语言），解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来。变量先暂时赋值为 undefined，函数则先声明好可使用。这一步做完了，然后再开始正式执行程序。
  * 另外，一个函数在执行之前，也会创建一个函数执行上下文环境，跟全局上下文差不多，不过 函数执行上下文中会多出 this arguments 和函数的参数。
  */

/**
 * 执行上下文栈（Execution Context Stack）
 *  JavaScript 引擎创建了执行上下文栈来管理执行上下文。可以把执行上下文栈认为是一个存储函数调用的栈结构，遵循先进后出的原则。
 */